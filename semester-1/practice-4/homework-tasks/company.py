from abc import ABC, abstractmethod


class Employee(ABC):
    """
    Абстрактный базовый класс для представления сотрудника.

    Определяет общий интерфейс и структуру для всех типов сотрудников.
    Реализует принцип полиморфизма через абстрактный метод calculate_salary().

    Атрибуты:
        worker (str): ФИО сотрудника
        kpi (int): Показатель эффективности (0-100+)
        salary (int): Итоговая зарплата с учетом KPI
    """

    def __init__(self, worker: str, salary: int, kpi: int):
        """
        Инициализирует объект сотрудника.

        Args:
            worker: ФИО сотрудника
            salary: Базовый оклад сотрудника
            kpi: Показатель эффективности (влияет на итоговую зарплату)
        """
        self.worker = worker
        self.kpi = kpi
        self.salary = salary
        self.calculate_salary()  # Автоматически рассчитываем зарплату при создании

    @abstractmethod
    def calculate_salary(self):
        """
        Абстрактный метод для расчета итоговой зарплаты.

        Должен быть реализован в каждом дочернем классе.
        Использует базовый оклад и KPI для расчета по специфичной формуле.
        """
        pass

    def get_info(self):
        """
        Возвращает строку с информацией о сотруднике.

        Returns:
            str: Строка в формате "ФИО | Оклад: X | KPI: Y"
        """
        return f"{self.worker} | Оклад: {self.salary:.2f} | KPI: {self.kpi}"


class Manager(Employee):
    """
    Класс для представления менеджера.

    Наследует от класса Employee и реализует специфичную формулу расчета зарплаты.
    Менеджер получает бонус в размере 20% от оклада, пропорциональный KPI.
    """

    def calculate_salary(self):
        """
        Рассчитывает зарплату менеджера.

        Формула: базовый_оклад + (базовый_оклад * 20% * (KPI / 100))
        Пример: при окладе 100000 и KPI 85: 100000 + (100000 * 0.2 * 0.85) = 117000
        """
        self.salary = self.salary + (self.salary * 0.2 * (self.kpi / 100))


class Developer(Employee):
    """
    Класс для представления разработчика.

    Наследует от класса Employee и реализует специфичную формулу расчета зарплаты.
    Разработчик получает зарплату, умноженную на коэффициент, зависящий от KPI.
    """

    def calculate_salary(self):
        """
        Рассчитывает зарплату разработчика.

        Формула: базовый_оклад * (1 + KPI / 100)
        Пример: при окладе 100000 и KPI 95: 100000 * (1 + 0.95) = 195000
        """
        self.salary = self.salary * (1 + self.kpi / 100)

# Создание экземпляров сотрудников и демонстрация работы


manager = Manager("Жмышенко Валерий Альбертович", 148888, 85)
developer = Developer("Сигма свинка", 120000, 95)

print(manager.get_info())
print(developer.get_info())
